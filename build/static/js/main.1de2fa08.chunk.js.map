{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","components/PageTitle.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","react_default","a","createElement","city","country","className","icon","src","Form","onSubmit","getWeather","type","name","placeholder","Weather","temperature","humdity","humidity","description","error","PageTitle","unsplash","require","API_KEY","init","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","weather","_this","callUnsplashApi","setState","main","temp","sys","stop","_callee2","location","_context2","searchPhotos","photos","link","randomPhotoNumber","Math","floor","random","div","document","getElementById","length","style","backgroundImage","urls","regular","components_PageTitle","components_Form","this","components_Weather","id","components_Titles","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1de2fa08.chunk.js","sourcesContent":["import React, {Component} from \"react\"\n\n\nvar Titles = props => (\n\t\t\t\t\t\t<div >\n\t\t\t\t\t\t\t{!props.city && !props.country &&\n\t\t\t\t\t\t\t<h1 className=\"title-container__weather_title \"> Weather Near You</h1>}\n\t\t\t\t\t\t\t{props.city && props.country &&\n\t\t\t\t\t\t\t<h1 className=\"title-container__weather_title\">{props.city}, {props.country}</h1>}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t{props.icon && \n\t\t\t\t\t\t\t<img className=\"title-container__weather_title center\" src={'https://openweathermap.org/img/w/'+props.icon+'.png'}></img>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\n\n\t\t\t\t\t\t//\t<div className=\"icon rainy\">\n \t\t\t\t\t\t//\t<div className=\"cloud\"></div>\n  \t\t\t\t\t\t//\t<div className=\"rain\"></div>\n  \t\t\t\t\t\t//\t</div>\n\n// class Titles extends Component {\n// \t\t\trender(){\n// \t\t\t\treturn (\n// \t\t\t\t\t\t<div>\n// \t\t\t\t\t\t\t<h1> Weather Finder </h1>\n// \t\t\t\t\t\t\t<p>Find out temperature, condtions and more... </p>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t)\n// \t\t\t}\n\n// }\n\nexport default Titles","import React, {Component} from \"react\"\n\n\nvar Form = props => (\n\t\t\t<form onSubmit={props.getWeather}> \n\n\t\t\t\t\t\t\t<input type=\"text\" name=\"city\" placeholder=\"City..\"/>\n\n\t\t\t\t\t\t\t<input type=\"text\" name=\"country\" placeholder=\"Country..\"/>\n\n\t\t\t\t\t\t\t<button>Get Weather</button>\n\n\n\t\t\t\t\t\t</form>\n\t)\n\n\n// class Form extends Component {\n// \t\t\trender(){\n// \t\t\t\treturn (\n// \t\t\t\t\t\t<form onSubmit={this.props.getWeather}> \n\n// \t\t\t\t\t\t\t<input type=\"text\" name=\"city\" placeholder=\"City..\"/>\n\n// \t\t\t\t\t\t\t<input type=\"text\" name=\"country\" placeholder=\"Country..\"/>\n\n// \t\t\t\t\t\t\t<button>Get Weather</button>\n\n\n// \t\t\t\t\t\t</form>\n\n\n// \t\t\t\t\t)\n// \t\t\t}\n\n// }\n\nexport default Form","import React, {Component} from \"react\"\n\nvar Weather = props => (\n\n\t\t\t\t\t\t<div className=\"weather__info\">\n\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\tprops.city && props.country && <p className=\"weather__key\">Location:  \n\t\t\t\t\t\t\t\t\t<span className=\"weather__value\"> {props.city}, {props.country}</span></p> \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{ \t\n\t\t\t\t\t\t\t\tprops.temperature && <p className=\"weather__key\">Temperature: \n\t\t\t\t\t\t\t\t\t<span className=\"weather__value\"> {props.temperature}</span>&#8451;</p> \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\tprops.humdity && <p className=\"weather__key\">Humidity:  \n\t\t\t\t\t\t\t\t\t<span className=\"weather__value\"> {props.humidity}</span></p> \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\tprops.description && <p className=\"weather__key\">Description:  \n\t\t\t\t\t\t\t\t\t<span className=\"weather__value\"> {props.description}</span></p> \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{ \tprops.error && <p className=\"weather__error\"> {props.error}</p> }\n\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\n\t\t\t\t\t)\n\n\nexport default Weather\n\n\n// class Weather extends Component {\n// \t\t\trender(){\n// \t\t\t\treturn (\n// \t\t\t\t\t\t<div>\n// \t\t\t\t\t\t\t{ this.props.city && this.props.country && <p>Location: {this.props.city}, {this.props.country}</p> }\n// \t\t\t\t\t\t\t{ this.props.temperature && <p>Temperature: {this.props.temperature}</p> }\n// \t\t\t\t\t\t\t{ this.props.humidity && <p>Humidity: {this.props.humidity}</p> }\n// \t\t\t\t\t\t\t{ this.props.description && <p>Description: {this.props.description}</p> }\n// \t\t\t\t\t\t\t{ this.props.error && <p> {this.props.error}</p> }\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t)\n// \t\t\t}\n\n// }\n","import React, {Component} from \"react\"\n\n\nvar PageTitle = () => (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h1 className=\"title-container__title\">Weather Finder</h1>\n\t\t\t\t\t\t\t<p className=\"title-container__subtitle\">Find out temperature,conditions and more..</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\n\n\n// class PageTitle extends Component {\n// \t\t\trender(){\n// \t\t\t\treturn (\n// \t\t\t\t\t\t<div>\n// \t\t\t\t\t\t\t<h1> Weather Finder </h1>\n// \t\t\t\t\t\t\t<p>Find out temperature, condtions and more... </p>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t)\n// \t\t\t}\n\n// }\n\nexport default PageTitle","import React, {Component} from \"react\"\n\nimport Titles from \"./components/Titles\"\nimport Form from \"./components/Form\"\nimport Weather from \"./components/Weather\"\nimport PageTitle from \"./components/PageTitle\"\nconst unsplash = require('unsplash-api');\nvar API_KEY =\"1ee407c3b086dbfe0f4d9a54ce009719\";\n\nunsplash.init('ca9680a200cc0897f1c481f5b91dc3e9736816253e893aeaddcf7f3f3c8d6329');\n\n\nclass App extends Component {\n\n  state = {\n\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n    icon: undefined\n\n  }\n\n\n  getWeather = async (e) => {\n\n\n          e.preventDefault();\n\n          var city = e.target.elements.city.value;\n\n          var country = e.target.elements.country.value;\n\n          var api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n\n          var data = await api_call.json();\n\n          if(data.weather){\n\n           var image =   this.callUnsplashApi(city)\n              this.setState({\n                    temperature: data.main.temp,\n                    city: data.name,\n                    country: data.sys.country,\n                    humidity: data.main.humidity,\n                    description: data.weather[0].description,\n                    icon: data.weather[0].icon,\n                    error: \"\"\n              });\n        } \n        else{\n               this.setState({\n                    temperature: undefined,\n                    city: undefined,\n                    country: undefined,\n                    humidity: undefined,\n                    description: undefined,\n                    error: \"Please enter the values..\"\n              });\n        }\n\n\n  }\n  callUnsplashApi = async (location) => {\n    unsplash.searchPhotos(location, null, null, null, function(error, photos, link) {\n      let body = photos;\n      var randomPhotoNumber = Math.floor(Math.random() * 10);\n      let div = document.getElementById (\"title-container\");\n\n      if(photos.length > 0){\n        div.style.backgroundImage = \"url('\" + photos[randomPhotoNumber].urls.regular + \"')\";\n      }\n      else {\n          let link='(/static/media/bg.01cb978b.png'\n          div.style.backgroundImage = \"url(\"+link+\")\";\n        }\n\n        }\n      )\n     ;\n   };\n\n\n\n          render(){\n\n\n                return(\n\n                  <div>\n                       <div className=\"wrapper\">\n                          <div className=\"main\">\n                              <div className=\"container\">\n                                \n                                  <div className=\"row\">\n                                    <div className=\"col-xs-12 col-sm-12 col-m-12 col-lg-12 title\">\n                                      <PageTitle />\n                                    </div>\n                                  </div>\n                                  \n\n                                    <div className=\"row\">\n\n                                      <div className=\"col-xs-7 col-sm-7 col-m-7 col-lg-7 form-container\">\n                                        <Form \n                                            getWeather={this.getWeather} \n                                        />\n                                        <Weather \n                                            temperature={this.state.temperature} \n                                            humidity={this.state.humidity}\n                                            city={this.state.city}\n                                            country={this.state.country}\n                                            description={this.state.description}\n                                            error={this.state.error}\n                                            icon= {this.state.icon}\n                                        />\n                                  </div>\n\n                                   <div className=\"col-xs-5 col-sm-5 col-m-5 col-lg-5 title-container\" id=\"title-container\">\n                                      <Titles temperature={this.state.temperature} \n                                            humidity={this.state.humidity}\n                                            city={this.state.city}\n                                            country={this.state.country}\n                                            description={this.state.description}\n                                            error={this.state.error}\n                                            icon= {this.state.icon}\n                                            />\n                                  </div>\n                              </div>\n                          </div>\n                      </div>\n                  </div>\n              </div>\n      \n\n                  )\n          }\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\nimport './Weather-Icons.css'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}