{"ast":null,"code":"/**\n * This file contains the main functionality for the unsplash-api module\n *\n * @author Noah Dietz - noahdietz\n * @author Jacob Copus  - jcopus\n */\n'use strict';\n\nvar request = require('request');\n\nvar path = require('path');\n\nvar fs = require('fs');\n\nvar HOST = 'https://api.unsplash.com/';\nvar client_id;\nmodule.exports = {\n  init: apiInit,\n  getUserPhotos: getUserPhotos,\n  getUserByName: getUserByName,\n  getPhotos: getPhotos,\n  searchPhotos: searchPhotos,\n  getPhoto: getPhoto,\n  getAllCategories: getAllCategories,\n  getCategory: getCategory,\n  getCategoryPhotos: getCategoryPhotos,\n  getCuratedBatches: getCuratedBatches,\n  getCuratedBatch: getCuratedBatch,\n  getCuratedBatchPhotos: getCuratedBatchPhotos,\n  getTotalStats: getTotalStats,\n  getCurrentUser: getCurrentUser,\n  updateCurrentUser: updateCurrentUser,\n  uploadPhoto: uploadPhoto\n};\n/**\n * initiation function required to handle application client_id\n * @param  {string} client_id application's client_id\n */\n\nfunction apiInit(client_id) {\n  this.client_id = client_id;\n}\n/**\n * Callback that returns retrieved user photos\n *\n * @callback getUserPhotosCallback\n * @param {object}  Error response error object\n * @param {Array}   photos array of photos from specified user\n */\n\n/**\n * gets photos of specified user\n * @param  {string}   userName username of target user\n * @param  {getUserPhotosCallback} callback called upon completion of API call\n */\n\n\nfunction getUserPhotos(userName, callback) {\n  request({\n    url: HOST + path.join('users', userName, 'photos'),\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': 'Client-ID ' + this.client_id\n    }\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(new Error(body), null);\n    return callback(null, JSON.parse(body));\n  });\n}\n/**\n * Callback that returns target user information\n *\n * @callback getUserByNameCallback\n * @param {object}  Error response error object\n * @param {object}  user  specified user's information\n */\n\n/**\n * gets the public info of the specified user\n * @param  {string}   userName username of target user\n * @param  {getUserByNameCallback} callback called upon completion of API call\n */\n\n\nfunction getUserByName(userName, callback) {\n  request({\n    url: HOST + path.join('users', userName),\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': 'Client-ID ' + this.client_id\n    }\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(new Error(body), null);\n    return callback(null, JSON.parse(body));\n  });\n}\n/**\n * Callback that returns retrieved categories\n *\n * @callback getAllCategoriesCallback\n * @param {object} Error response error object\n * @param {array} categories array of all available categories\n */\n\n/**\n * gets all of the available photo categories\n * @param  {getAllCategoriesCallback} callback called upon completion of API call\n */\n\n\nfunction getAllCategories(callback) {\n  request({\n    url: HOST + 'categories',\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': 'Client-ID ' + this.client_id\n    }\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(new Error(body), null);\n    return callback(null, JSON.parse(body));\n  });\n}\n/**\n * Callback that returns retrieved photos and links\n *\n * @callback getPhotosCallback\n * @param {object} Error response error object\n * @param {Array} photos array of retrieved photos\n * @param {string} link string of links for prev/next page\n */\n\n/**\n * gets a single page of photos from the list of all photos\n * @param  {int}      page     target page number\n * @param  {int}      perPage  number of photos returned per page\n * @param  {getPhotosCallback} callback called upon completion of API call\n */\n\n\nfunction getPhotos(page, perPage, callback) {\n  var params = {};\n  if (page != null) params.page = page;\n  if (perPage != null) params.per_page = perPage;\n  request({\n    url: HOST + path.join('photos'),\n    method: 'GET',\n    qs: params,\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': 'Client-ID ' + this.client_id\n    }\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(new Error(body), null);\n    return callback(null, JSON.parse(body), res.headers.link);\n  });\n}\n/**\n * Callback that returns array of search results and links\n *\n * @callback searchPhotosCallback\n * @param {object} Error response error object\n * @param {array} photos search results\n * @param {string} link string of links for prev/next page\n */\n\n/**\n * gets a single page of photos by search query\n * @param  {string}   query      term to search by\n * @param  {Array}    categories ids of categories to filter by, as an array of ints\n * @param  {int}      page       target page number\n * @param  {int}      perPage    number of photos returned per page\n * @param  {searchPhotosCallback} callback  called upon completion of API call\n */\n\n\nfunction searchPhotos(query, categories, page, perPage, callback) {\n  var params = {};\n  if (query != null) params.query = query;\n\n  if (categories != null) {\n    params.category = '';\n\n    for (var index = 0; index < categories; index++) {\n      params.category += categories[index];\n      if (index != categories.length - 1) params.category += ',';\n    }\n  }\n\n  if (page != null) params.page = page;\n  if (perPage != null) params.per_page = perPage;\n  request({\n    url: HOST + path.join('photos', 'search'),\n    method: 'GET',\n    qs: params,\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': 'Client-ID ' + this.client_id\n    }\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(new Error(body), null);\n    return callback(null, JSON.parse(body), res.headers.link);\n  });\n}\n/**\n * Callback that returns the request photo information\n *\n * @callback getPhotoCallback\n * @param {object} Error response error object\n * @param {object} photo requested photo information\n */\n\n/**\n * gets a single photo by id\n * @param  {string}   id       id of photo to request\n * @param  {int}      width    custom width to apply\n * @param  {int}      height   custom height to apply\n * @param  {Array}    rect     custom rectangle to apply [x, y, width, height]\n * @param  {getPhotoCallback} callback called upon completion of API call\n */\n\n\nfunction getPhoto(id, width, height, rect, callback) {\n  var params = {};\n  if (width != null) params.w = width;\n  if (height != null) params.h = height;\n  if (rect != null) params.rect = rect[0] + ',' + rect[1] + ',' + rect[2] + ',' + rect[3];\n  request({\n    url: HOST + path.join('photos', id),\n    method: 'GET',\n    qs: params,\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': 'Client-ID ' + this.client_id\n    }\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(new Error(body), null);\n    return callback(null, JSON.parse(body));\n  });\n}\n/**\n * Callback that returns specified category information\n *\n * @callback getCategoryCallback\n * @param {object} Error response error object\n * @param {object} category target category information\n */\n\n/**\n * get category information by ID\n * @param  {int} categoryId ID of target category\n * @param  {getCategoryCallback} callback  called upon completion of API call\n */\n\n\nfunction getCategory(categoryId, callback) {\n  request({\n    url: HOST + path.join('categories', categoryId.toString()),\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': 'Client-ID ' + this.client_id\n    }\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(new Error(body), null);\n    return callback(null, JSON.parse(body));\n  });\n}\n/**\n * Callback that returns photos of specified category\n *\n * @callback getCategoryPhotosCallback\n * @param {object} Error response error object\n * @param {array} photos retrieved photos\n * @param {string} link string of prev/next page links\n */\n\n/**\n * get photos from a specific category\n * @param {int} categoryId id of the target category\n * @param {int} page target page of photos to return\n * @param {int} perPage number of photos per page\n * @param {getCategoryPhotosCallback} callback called upon completion of API call\n */\n\n\nfunction getCategoryPhotos(categoryId, page, perPage, callback) {\n  var params = {};\n  if (page != null) params.page = page;\n  if (perPage != null) params.per_page = perPage;\n  request({\n    url: HOST + path.join('categories', categoryId.toString(), 'photos'),\n    method: 'GET',\n    qs: params,\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': 'Client-ID ' + this.client_id\n    }\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(new Error(body), null);\n    return callback(null, JSON.parse(body), res.headers.link);\n  });\n}\n/**\n * Callback to return the curated batches\n *\n * @callback getCuratedBatchesCallback\n * @param {object} Error response error object\n * @param {array} batches set of curated batch information\n */\n\n/**\n * get a single page of curated batches\n * @param  {int}      page       target page number\n * @param  {int}      perPage    number of results per page\n * @param  {getCuratedBatchesCallback} callback   called upon completion of API call\n */\n\n\nfunction getCuratedBatches(page, perPage, callback) {\n  var params = {};\n  if (page != null) params.page = page;\n  if (perPage != null) params.per_page = perPage;\n  request({\n    url: HOST + path.join('curated_batches'),\n    method: 'GET',\n    qs: params,\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': 'Client-ID ' + this.client_id\n    }\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(new Error(body), null);\n    return callback(null, JSON.parse(body), res.headers.link);\n  });\n}\n/**\n * Callback that returns the info for a specific curated batch\n *\n * @callback getCuratedBatchCallback\n * @param {object} Error response error object\n * @param {object} batch target batch information\n */\n\n/**\n * get info from a curated batch\n * @param  {int}      id         target page number\n * @param  {getCuratedBatchCallback} callback   called upon completion of API call\n */\n\n\nfunction getCuratedBatch(id, callback) {\n  request({\n    url: HOST + path.join('curated_batches', id.toString()),\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': 'Client-ID ' + this.client_id\n    }\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(new Error(body), null);\n    return callback(null, JSON.parse(body));\n  });\n}\n/**\n * Callback that returns photos of a curated batch\n *\n * @callback getCuratedBatchPhotosCallback\n * @param {object} Error response error object\n * @param {array} photos set of photos in target batch\n */\n\n/**\n * get photos from a curated batch\n * @param  {int}      id         target page number\n * @param  {getCuratedBatchPhotosCallback} callback   called upon completion of API call\n */\n\n\nfunction getCuratedBatchPhotos(id, callback) {\n  request({\n    url: HOST + path.join('curated_batches', id.toString(), 'photos'),\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': 'Client-ID ' + this.client_id\n    }\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(new Error(body), null);\n    return callback(null, JSON.parse(body));\n  });\n}\n/**\n * Callback that returns the overall stats\n *\n * @callback getTotalStatsCallback\n * @param {object} Error response error object\n * @param {object} stats overall stats of the Unsplash site\n */\n\n/**\n * get total download stats\n * @param  {getTotalStatsCallback} callback   called upon completion of API call\n */\n\n\nfunction getTotalStats(callback) {\n  request({\n    url: HOST + path.join('stats', 'total'),\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': 'Client-ID ' + this.client_id\n    }\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(new Error(body), null);\n    return callback(null, JSON.parse(body));\n  });\n}\n/**\n * Callback that returns the current logged-in user's information\n *\n * @callback geCurrentUserCallback\n * @param {object} Error response error object\n * @param {object} user information of current, logged-in user\n */\n\n/**\n * retrieves personal information about the logged-in user\n * @param  {string}   token    OAuth token for target user\n * @param  {getCurrentUserCallback} callback called upon completion of API call\n */\n\n\nfunction getCurrentUser(token, callback) {\n  request({\n    url: HOST + 'me',\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    }\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(new Error(body), null);\n    return callback(null, JSON.parse(body));\n  });\n}\n/**\n * Callback that returns updated information of logged-in user\n *\n * @callback updateCurrentUserCallback\n * @param {object} Error response error object\n * @param {object} user updated information of logged-in user\n */\n\n/**\n * update the current logged-in user's personal information\n * @param  {string}   token    OAuth token for target user\n * @param  {object}   changes  information to be changed in logged-in user\n * @param  {updateCurrentUserCallback} callback called upon completion of API call\n */\n\n\nfunction updateCurrentUser(token, changes, callback) {\n  request({\n    url: HOST + 'me',\n    method: 'PUT',\n    qs: changes,\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    }\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(new Error(body), null);\n    return callback(null, JSON.parse(body));\n  });\n}\n/**\n * Callback that returns newly submitted photo's information\n *\n * @callback uploadPhotoCallback\n * @param {object} Error response error object\n * @param {object} photo information of the uploaded photo\n */\n\n/**\n * submits a photo to the current logged-in account\n * @param  {string}   token     OAuth token for target user\n * @param  {string}   photoPath location of photo to be uploaded\n * @param  {uploadPhotoCallback} callback  called upon cpmletion of API call\n */\n\n\nfunction uploadPhoto(token, photoPath, callback) {\n  request({\n    url: HOST + 'photos',\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    },\n    formData: {\n      photo: fs.createReadStream(path.join(process.cwd(), photoPath))\n    }\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 201) return callback(new Error(body), null);\n    return callback(null, JSON.parse(body));\n  });\n}","map":null,"metadata":{},"sourceType":"script"}